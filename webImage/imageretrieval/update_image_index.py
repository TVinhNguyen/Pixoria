from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
import os
from media.models import Image , INDEX_PATH, MAPPING_PATH
from .incremental_update  import IndexUpdater

class Command(BaseCommand):
    help = 'C·∫≠p nh·∫≠t ho·∫∑c x√¢y d·ª±ng l·∫°i FAISS index cho t√¨m ki·∫øm ·∫£nh t∆∞∆°ng t·ª±'

    def add_arguments(self, parser):
        parser.add_argument(
            '--recent',
            type=int,
            help='Ch·ªâ x·ª≠ l√Ω ·∫£nh ƒë∆∞·ª£c t·∫°o trong N ng√†y g·∫ßn ƒë√¢y'
        )
        parser.add_argument(
            '--rebuild',
            action='store_true',
            help='X√¢y d·ª±ng l·∫°i index t·ª´ ƒë·∫ßu thay v√¨ c·∫≠p nh·∫≠t'
        )
        parser.add_argument(
            '--batch-size',
            type=int,
            default=32,
            help='K√≠ch th∆∞·ªõc batch khi x·ª≠ l√Ω ·∫£nh (m·∫∑c ƒë·ªãnh: 32)'
        )

    def handle(self, *args, **options):
        updater = IndexUpdater()
        
        # X·ª≠ l√Ω t√πy ch·ªçn rebuild (x√¢y d·ª±ng l·∫°i)
        if options['rebuild']:
            self.stdout.write("üî® ƒêang x√¢y d·ª±ng l·∫°i index t·ª´ ƒë·∫ßu...")
        else:
            # T·∫£i index hi·ªán c√≥ n·∫øu c√≥
            if os.path.exists(INDEX_PATH) and os.path.exists(MAPPING_PATH):
                try:
                    updater.load(INDEX_PATH, MAPPING_PATH)
                    self.stdout.write(f"üìã ƒê√£ t·∫£i index hi·ªán c√≥ v·ªõi {updater.index.ntotal} ·∫£nh")
                except Exception as e:
                    self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i index hi·ªán c√≥: {e}"))
                    self.stdout.write("üî® ƒêang t·∫°o index m·ªõi...")
            else:
                self.stdout.write("üî® Ch∆∞a c√≥ index, ƒëang t·∫°o m·ªõi...")
        
        # L·∫•y danh s√°ch ·∫£nh c·∫ßn x·ª≠ l√Ω
        query = Image.objects.filter(is_public=True)
        if options['recent']:
            cutoff_date = timezone.now() - timedelta(days=options['recent'])
            query = query.filter(created_at__gte=cutoff_date)
            self.stdout.write(f"üîç ƒêang x·ª≠ l√Ω {query.count()} ·∫£nh t·ª´ {options['recent']} ng√†y qua")
        else:
            self.stdout.write(f"üîç ƒêang x·ª≠ l√Ω t·∫•t c·∫£ {query.count()} ·∫£nh c√¥ng khai")
        
        if query.count() == 0:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ x·ª≠ l√Ω"))
            return
        
        # X·ª≠ l√Ω batch theo batch ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
        batch_size = options['batch_size']
        total_images = query.count()
        processed = 0
        
        # X·ª≠ l√Ω t·ª´ng batch
        for i in range(0, total_images, batch_size):
            batch = list(query[i:i+batch_size])
            if options['rebuild'] and i == 0:
                # Kh·ªüi t·∫°o index v·ªõi batch ƒë·∫ßu ti√™n
                features, valid_images = updater.extractor.extract_features_from_s3_data(batch, batch_size)
                if features.shape[0] > 0:
                    updater.index = updater.index.__class__(updater.feature_dim)
                    updater.index.add(features)
                    updater.image_data = valid_images
                    processed += len(valid_images)
            else:
                # C·∫≠p nh·∫≠t index v·ªõi c√°c batch ti·∫øp theo
                added = updater.update_index(batch, batch_size)
                processed += added
            
            self.stdout.write(f"‚úì ƒê√£ x·ª≠ l√Ω {min(i+batch_size, total_images)}/{total_images} ·∫£nh")
        
        # L∆∞u index v√† mapping
        os.makedirs(os.path.dirname(INDEX_PATH), exist_ok=True)
        updater.save(INDEX_PATH, MAPPING_PATH)
        
        self.stdout.write(self.style.SUCCESS(
            f"‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {processed} ·∫£nh. "
            f"Index hi·ªán c√≥ {updater.index.ntotal} ·∫£nh."
        ))
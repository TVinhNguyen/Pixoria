name: Deploy to Production

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./webImage
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pixoria-backend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pixoria-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pixoria-backend:buildcache,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pixoria-frontend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pixoria-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pixoria-frontend:buildcache,mode=max
        build-args: |
          NEXT_PUBLIC_API_BASE_URL=https://${{ secrets.DOMAIN_OR_IP }}/api
          
    # Deploy to EC2
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_SSH_KEY }}
        port: 22
        script: |
          mkdir -p ~/pixoria
          cd ~/pixoria
          
          # Tải xuống các file cấu hình mới nhất
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.production.yml
          
          mkdir -p ~/pixoria/nginx
          curl -o ~/pixoria/nginx/nginx.conf https://raw.githubusercontent.com/${{ github.repository }}/main/nginx/nginx.conf
          
          # Thiết lập biến môi trường
          export DOCKER_USERNAME="${{ secrets.DOCKER_HUB_USERNAME }}"
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export DOMAIN_OR_IP="${{ secrets.DOMAIN_OR_IP }}"
          export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          
          export AWS_USE_S3="${{ secrets.AWS_USE_S3 }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_S3_BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}"
          export AWS_S3_REGION_NAME="${{ secrets.AWS_S3_REGION_NAME }}"
          
          # Thiết lập swapfile nếu chưa có
          if [ ! -f /swapfile ]; then
            sudo dd if=/dev/zero of=/swapfile bs=128M count=16
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
          fi
          
          # Tạo các thư mục cần thiết
          mkdir -p ~/pixoria/mediafiles ~/pixoria/staticfiles ~/pixoria/clip_cache ~/pixoria/ssl
          
          # Thiết lập SSL nếu chưa có
          if [ ! -f ~/pixoria/ssl/fullchain.pem ] || [ ! -f ~/pixoria/ssl/privkey.pem ]; then
            if ! command -v certbot &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y certbot
            fi
            
            docker-compose down nginx || true
            
            sudo certbot certonly --standalone --non-interactive --agree-tos --email ${{ secrets.ADMIN_EMAIL }} -d ${{ secrets.DOMAIN_OR_IP }}
            
            sudo cp /etc/letsencrypt/live/${{ secrets.DOMAIN_OR_IP }}/fullchain.pem ~/pixoria/ssl/
            sudo cp /etc/letsencrypt/live/${{ secrets.DOMAIN_OR_IP }}/privkey.pem ~/pixoria/ssl/
            sudo chown -R $USER:$USER ~/pixoria/ssl
          fi
          
          # Xử lý đặc biệt cho nginx.conf để thay thế biến ${DOMAIN_OR_IP}
          sed -i "s/\${DOMAIN_OR_IP}/${{ secrets.DOMAIN_OR_IP }}/g" ~/pixoria/nginx/nginx.conf
          
          # Đảm bảo Redis đang hoạt động đúng
          docker-compose logs redis-server
          
          # Dọn dẹp images không dùng
          docker image prune -af
          
          # Pull và chạy container
          docker-compose pull
          docker-compose up -d
          
          # Đảm bảo quyền thư mục đúng
          sudo chown -R $USER:$USER ~/pixoria/mediafiles
          sudo chown -R $USER:$USER ~/pixoria/staticfiles
          sudo chown -R $USER:$USER ~/pixoria/clip_cache
          
          # Kiểm tra log sau khi khởi động
          docker-compose logs backend | tail -n 50
          
          # Thiết lập cron job cho việc gia hạn SSL
          (crontab -l 2>/dev/null; echo "0 0 1 * * sudo certbot renew --quiet && sudo cp /etc/letsencrypt/live/${{ secrets.DOMAIN_OR_IP }}/fullchain.pem ~/pixoria/ssl/ && sudo cp /etc/letsencrypt/live/${{ secrets.DOMAIN_OR_IP }}/privkey.pem ~/pixoria/ssl/ && docker-compose -f ~/pixoria/docker-compose.yml restart nginx") | crontab -
          
          # Hiển thị trạng thái các container
          docker-compose ps
